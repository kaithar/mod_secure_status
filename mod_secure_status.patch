--- mod_status.c.orig	2015-02-18 18:47:41.189396429 +0000
+++ mod_status.c	2015-02-18 19:06:09.341466585 +0000
@@ -1,7 +1,13 @@
-/* Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
+/* This software is mostly not my own work, I've attempted to provide full
+ * credit for upstream work in the NOTICE file.
+ * If I goofed some way in this regard, please contact me so I can correct it.
+ *
+ * Primary source file is from the Apache Software Foundation (ASF).
+ * Some code has been lifted from the excellent mod_rpaf, and remains
+ * Copyright 2011 Ask BjÃ¸rn Hansen
+ * Remaining atrocities are copyright 2015 to Daniel Bradshaw.
+ *
+ * This and it's source works are under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
@@ -55,6 +61,20 @@
  */
 
 #define CORE_PRIVATE
+
+/* Begin section lifted from mod_rpaf */
+#include "ap_release.h"
+#if AP_SERVER_MAJORVERSION_NUMBER >= 2 && AP_SERVER_MINORVERSION_NUMBER >= 4
+  #define DEF_IP   useragent_ip
+  #define DEF_ADDR useragent_addr
+  #define DEF_POOL pool
+#else
+  #define DEF_IP   connection->remote_ip
+  #define DEF_ADDR connection->remote_addr
+  #define DEF_POOL connection->pool
+#endif
+/* End section lifted from mod_rpaf */
+
 #include "httpd.h"
 #include "http_config.h"
 #include "http_core.h"
@@ -115,6 +135,43 @@ APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL(ap,
 static pid_t child_pid;
 #endif
 
+/* Function lifted from mod_rpaf */
+static void *create_server_cfg(apr_pool_t *p, server_rec *s) {
+    /* This function was trimmed down due to not needing the full settings struct */
+    apr_array_header_t *permitted_ips = apr_array_make(p, 10, sizeof(apr_ipsubnet_t *));
+    if (!permitted_ips)
+        return NULL;
+
+    return (void *)permitted_ips;
+}
+
+/* Function lifted from mod_rpaf without change */
+/* quick check for ipv4/6 likelihood; similar to Apache2.4 mod_remoteip check */
+static int rpaf_looks_like_ip(const char *ip) {
+    static const char ipv4_set[] = "0123456789./";
+    static const char ipv6_set[] = "0123456789abcdef:/";
+
+    /* zero length value is not valid */
+    if (!*ip)
+      return 0;
+
+    const char *ptr    = ip;
+
+    /* determine if this could be a IPv6 or IPv4 address */
+    if (strchr(ip, ':'))
+    {
+        while(*ptr && strchr(ipv6_set, *ptr) != NULL)
+            ++ptr;
+    }
+    else
+    {
+        while(*ptr && strchr(ipv4_set, *ptr) != NULL)
+            ++ptr;
+    }
+
+    return (*ptr == '\0');
+}
+
 /*
  * command-related code. This is here to prevent use of ExtendedStatus
  * without status_module included.
@@ -139,6 +196,38 @@ static const char *set_reqtail(cmd_parms
     return NULL;
 }
 
+/* Function lifted from mod_rpaf, some names changed for consistency */
+static const char *SecStatus_set_permit_ip(cmd_parms *cmd, void *dummy, const char *permit_ip) {
+    char *ip, *mask;
+    apr_ipsubnet_t **sub;
+    apr_status_t rv;
+    server_rec *s = cmd->server;
+    apr_array_header_t *permitted_ips = (apr_array_header_t *)ap_get_module_config(s->module_config,
+                                                                   &status_module);
+
+    if (rpaf_looks_like_ip(permit_ip)) {
+        ip = apr_pstrdup(cmd->temp_pool, permit_ip);
+        if (mask = ap_strchr(ip, '/')) {
+            *mask++ = '\0';
+        }
+        sub = (apr_ipsubnet_t **)apr_array_push(permitted_ips);
+        rv = apr_ipsubnet_create(sub, ip, mask, cmd->pool);
+
+        if (rv != APR_SUCCESS) {
+            char msgbuf[128];
+            apr_strerror(rv, msgbuf, sizeof(msgbuf));
+            return apr_pstrcat(cmd->pool, "mod_status: Error parsing IP ", permit_ip, " in ",
+                               cmd->cmd->name, ". ", msgbuf, NULL);
+        }
+    }
+    else
+    {
+      return apr_pstrcat(cmd->pool, "mod_status: Error parsing IP \"", permit_ip, "\" in ",
+                         cmd->cmd->name, ". Failed basic parsing.", NULL);     
+    }
+
+    return NULL;
+}
 
 static const command_rec status_module_cmds[] =
 {
@@ -147,9 +236,31 @@ static const command_rec status_module_c
     AP_INIT_FLAG("SeeRequestTail", set_reqtail, NULL, RSRC_CONF,
       "For verbose requests, \"On\" to see the last 63 chars of the request, "
       "\"Off\" (default) to see the first 63 in extended status display"),
+    /* This call lifted from mod_rpaf */
+    AP_INIT_ITERATE(
+                 "SecStatus_PermitIPs",
+                 SecStatus_set_permit_ip,
+                 NULL,
+                 RSRC_CONF,
+                 "IP(s) permitted to request status"
+                 ),
     {NULL}
 };
 
+/* Function lifted from mod_rpaf */
+static int is_in_array(apr_sockaddr_t *remote_addr, apr_array_header_t *permitted_ips) {
+    int i;
+    apr_ipsubnet_t **subs = (apr_ipsubnet_t **)permitted_ips->elts;
+
+    for (i = 0; i < permitted_ips->nelts; i++) {
+        if (apr_ipsubnet_test(subs[i], remote_addr)) {
+            return 1;
+        }
+    }
+
+    return 0;
+}
+
 /* Format the number of bytes nicely */
 static void format_byte_out(request_rec *r, apr_off_t bytes)
 {
@@ -230,6 +341,7 @@ static int status_handler(request_rec *r
     int j, i, res;
     int ready;
     int busy;
+    int graced; // Line added by Kaithar
     unsigned long count;
     unsigned long lres, my_lres, conn_lres;
     apr_off_t bytes, my_bytes, conn_bytes;
@@ -253,6 +365,16 @@ static int status_handler(request_rec *r
         return DECLINED;
     }
 
+
+    /* Begin modified from code mod_rpaf */
+    apr_array_header_t *permitted_ips = (apr_array_header_t *)ap_get_module_config(r->server->module_config,
+                                                                   &status_module);
+    /* check if the remote_addr is in the allowed remote IP list */
+    if (is_in_array(r->DEF_ADDR, permitted_ips) != 1) {
+        return HTTP_FORBIDDEN;
+    }
+    /* End mod_rpaf section */
+
 #ifdef HAVE_TIMES
 #ifdef _SC_CLK_TCK
     tick = sysconf(_SC_CLK_TCK);
@@ -263,6 +385,7 @@ static int status_handler(request_rec *r
 
     ready = 0;
     busy = 0;
+    graced = 0; // Line added by Kaithar
     count = 0;
     bcount = 0;
     kbcount = 0;
@@ -345,7 +468,12 @@ static int status_handler(request_rec *r
                 else if (res != SERVER_DEAD &&
                          res != SERVER_STARTING &&
                          res != SERVER_IDLE_KILL)
+                {
+                    /* Kaithar modified this code block to count gracefuls. */
+                    if (res == SERVER_GRACEFUL) 
+                        graced++;
                     busy++;
+                }
             }
 
             /* XXX what about the counters for quiescing/seg faulted
@@ -491,11 +619,15 @@ static int status_handler(request_rec *r
         } /* short_report */
     } /* ap_extended_status */
 
+    /* Graceful info added to these two prints. - Kaithar */
     if (!short_report)
         ap_rprintf(r, "<dt>%d requests currently being processed, "
-                      "%d idle workers</dt>\n", busy, ready);
+                      "%d idle workers</dt>\n"
+                      "<dt>%d workers pending Graceful restart</dt>\n",
+                      busy, ready, graced);
     else
-        ap_rprintf(r, "BusyWorkers: %d\nIdleWorkers: %d\n", busy, ready);
+        ap_rprintf(r, "BusyWorkers: %d\nIdleWorkers: %d\nGracefulWorkers: %d\n",
+                      busy, ready, graced);
 
     /* send the scoreboard 'table' out */
     if (!short_report)
@@ -874,7 +1006,7 @@ module AP_MODULE_DECLARE_DATA status_mod
     STANDARD20_MODULE_STUFF,
     NULL,                       /* dir config creater */
     NULL,                       /* dir merger --- default is to override */
-    NULL,                       /* server config */
+    create_server_cfg,          /* server config */
     NULL,                       /* merge server config */
     status_module_cmds,         /* command table */
     register_hooks              /* register_hooks */
